<?php

namespace Voiture\FrontOfficeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AnnoncesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnoncesRepository extends EntityRepository
{
	public function getAnnonceGroupedByBrand()
	{//Retourne une annonce par marque grÃ¢ce au GROUP BY
		$query = $this ->getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a
			GROUP BY a.brand')
		;

		return $query -> getResult();
	}

	public function getAnnonceGroupedByCategories()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			GROUP BY a.categorie ')
		;

		return $query -> getResult();
	}

	public function getAnnoncesByRegions()
	{
		$query = $this -> getEntityManager()-> createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			GROUP BY a.region');

		return $query -> getResult();
	}

	public function getKilometers($kilometers)
	{
		$query = $this -> getEntityManager()-> createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			WHERE a.kilometers < :kilometers')
		->setParameter('kilometers', $kilometers);

		return $query -> getResult();
	}

	public function getAnnoncesByDateFirstAcquire($dateFirstAcquire)
	{
		$query = $this -> getEntityManager()-> createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a
			WHERE a.dateFirstAcquire < :dateFirstAcquire')
		->setParameter('dateFirstAcquire', $dateFirstAcquire);

		return $query -> getResult();
	}

	public function getAnnonceByPrice($price)
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			WHERE a.price < :price')
		->setParameter('price', $price);

		return $query ->getResult();
	}

	public function countAnnonces()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT COUNT(a.id)
			FROM VoitureFrontOfficeBundle:Annonces a');

		return $query -> getSingleScalarResult();
	}

	public function getRenaultAnnonces()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT COUNT(a.id 
			FROM VoitureFrontOfficeBundle:Annonces a 
			WHERE a.brand LIKE :Renault')
		->setParameter('Renault','%enault%');

		return $query -> getSingleScalarResult();
	}

	public function getBrandWithLessAnnonces()
	{
		$query = $this ->getEntityManager()->createQuery('
			SELECT b.name, COUNT(a.id) as nbAnnonces
			FROM VoitureFrontOfficeBundle:Brand b
			LEFT JOIN b.annonces a 
			GROUP BY b.id
			ORDER BY nbAnnonces ASC ')
		->setMaxResults(1);

		return $query -> getSingleResult();
	}
	

	public function lastAnnoncePublished()
	{
		$query = $this ->getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			ORDER BY a.dateCreated DESC')
		->setMaxResults(1);

		return $query ->getSingleResult();
	}

	/*public function annoncesRecentes()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			WHERE a.dateCreated < :avantHier')
		->setParameter('avantHier', new \date('- 2 days'));

		return $query -> getResult();
	}
*/
	public function getLastAnnonces()
	{
		$em = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			ORDER BY a.dateCreated DESC ')
		->setMaxResults(5);

		return $query -> getResult();
	}

	public function triParDate($dateCreated)
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			WHERE a.dateCreated > :parution')
		->setParameter('parution', $dateCreated);

		return $query -> getResult();
	}

	public function RenaultEssonne()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT a 
			FROM VoitureFrontOfficeBundle:Annonces a 
			JOIN a.brand b
			JOIN a.region r
			WHERE b.name LIKE :Renault
			AND r.name LIKE :Essonne 
			AND a.price < 10000
			ORDER BY a.price DESC')
		->setParameter('Renault','%enault%')
		->setParameter('Essonne', '%ssonne%');

		return $query -> getResult();
	}

			
}
 